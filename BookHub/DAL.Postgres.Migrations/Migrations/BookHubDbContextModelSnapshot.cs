// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Postgres.Migrations.Migrations
{
    [DbContext(typeof(BookHubDbContext))]
    partial class BookHubDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("integer");

                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBook");

                    b.HasData(
                        new
                        {
                            AuthorsId = 15,
                            BooksId = 1
                        },
                        new
                        {
                            AuthorsId = 14,
                            BooksId = 10
                        },
                        new
                        {
                            AuthorsId = 13,
                            BooksId = 11
                        },
                        new
                        {
                            AuthorsId = 13,
                            BooksId = 12
                        },
                        new
                        {
                            AuthorsId = 1,
                            BooksId = 1
                        },
                        new
                        {
                            AuthorsId = 1,
                            BooksId = 2
                        },
                        new
                        {
                            AuthorsId = 2,
                            BooksId = 3
                        },
                        new
                        {
                            AuthorsId = 2,
                            BooksId = 4
                        },
                        new
                        {
                            AuthorsId = 2,
                            BooksId = 5
                        },
                        new
                        {
                            AuthorsId = 3,
                            BooksId = 5
                        },
                        new
                        {
                            AuthorsId = 3,
                            BooksId = 6
                        },
                        new
                        {
                            AuthorsId = 3,
                            BooksId = 7
                        },
                        new
                        {
                            AuthorsId = 4,
                            BooksId = 8
                        },
                        new
                        {
                            AuthorsId = 4,
                            BooksId = 9
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 10
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 11
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 12
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 13
                        },
                        new
                        {
                            AuthorsId = 6,
                            BooksId = 14
                        },
                        new
                        {
                            AuthorsId = 6,
                            BooksId = 15
                        },
                        new
                        {
                            AuthorsId = 6,
                            BooksId = 16
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 17
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 18
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 19
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 20
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 21
                        },
                        new
                        {
                            AuthorsId = 8,
                            BooksId = 22
                        },
                        new
                        {
                            AuthorsId = 8,
                            BooksId = 23
                        },
                        new
                        {
                            AuthorsId = 8,
                            BooksId = 24
                        },
                        new
                        {
                            AuthorsId = 9,
                            BooksId = 25
                        },
                        new
                        {
                            AuthorsId = 9,
                            BooksId = 26
                        },
                        new
                        {
                            AuthorsId = 9,
                            BooksId = 27
                        },
                        new
                        {
                            AuthorsId = 10,
                            BooksId = 28
                        },
                        new
                        {
                            AuthorsId = 11,
                            BooksId = 29
                        },
                        new
                        {
                            AuthorsId = 12,
                            BooksId = 30
                        },
                        new
                        {
                            AuthorsId = 13,
                            BooksId = 31
                        },
                        new
                        {
                            AuthorsId = 14,
                            BooksId = 32
                        },
                        new
                        {
                            AuthorsId = 14,
                            BooksId = 33
                        },
                        new
                        {
                            AuthorsId = 15,
                            BooksId = 34
                        },
                        new
                        {
                            AuthorsId = 15,
                            BooksId = 35
                        });
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.Property<int>("GenresId")
                        .HasColumnType("integer");

                    b.HasKey("BooksId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("BookGenre");

                    b.HasData(
                        new
                        {
                            BooksId = 1,
                            GenresId = 1
                        },
                        new
                        {
                            BooksId = 2,
                            GenresId = 2
                        },
                        new
                        {
                            BooksId = 3,
                            GenresId = 3
                        },
                        new
                        {
                            BooksId = 3,
                            GenresId = 8
                        },
                        new
                        {
                            BooksId = 3,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 4,
                            GenresId = 3
                        },
                        new
                        {
                            BooksId = 5,
                            GenresId = 4
                        },
                        new
                        {
                            BooksId = 5,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 6,
                            GenresId = 5
                        },
                        new
                        {
                            BooksId = 7,
                            GenresId = 6
                        },
                        new
                        {
                            BooksId = 7,
                            GenresId = 7
                        },
                        new
                        {
                            BooksId = 8,
                            GenresId = 7
                        },
                        new
                        {
                            BooksId = 9,
                            GenresId = 8
                        },
                        new
                        {
                            BooksId = 10,
                            GenresId = 9
                        },
                        new
                        {
                            BooksId = 11,
                            GenresId = 10
                        },
                        new
                        {
                            BooksId = 12,
                            GenresId = 11
                        },
                        new
                        {
                            BooksId = 13,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 14,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 15,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 16,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 17,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 18,
                            GenresId = 14
                        },
                        new
                        {
                            BooksId = 19,
                            GenresId = 15
                        },
                        new
                        {
                            BooksId = 19,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 19,
                            GenresId = 1
                        },
                        new
                        {
                            BooksId = 20,
                            GenresId = 16
                        },
                        new
                        {
                            BooksId = 20,
                            GenresId = 2
                        },
                        new
                        {
                            BooksId = 21,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 22,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 23,
                            GenresId = 18
                        },
                        new
                        {
                            BooksId = 23,
                            GenresId = 3
                        },
                        new
                        {
                            BooksId = 24,
                            GenresId = 19
                        },
                        new
                        {
                            BooksId = 25,
                            GenresId = 20
                        },
                        new
                        {
                            BooksId = 26,
                            GenresId = 5
                        },
                        new
                        {
                            BooksId = 27,
                            GenresId = 6
                        },
                        new
                        {
                            BooksId = 28,
                            GenresId = 7
                        },
                        new
                        {
                            BooksId = 29,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 30,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 31,
                            GenresId = 16
                        },
                        new
                        {
                            BooksId = 32,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 33,
                            GenresId = 9
                        },
                        new
                        {
                            BooksId = 34,
                            GenresId = 20
                        },
                        new
                        {
                            BooksId = 35,
                            GenresId = 10
                        },
                        new
                        {
                            BooksId = 35,
                            GenresId = 8
                        },
                        new
                        {
                            BooksId = 35,
                            GenresId = 5
                        });
                });

            modelBuilder.Entity("BookOrder", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.Property<int>("OrdersId")
                        .HasColumnType("integer");

                    b.HasKey("BooksId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("BookOrder");

                    b.HasData(
                        new
                        {
                            BooksId = 1,
                            OrdersId = 1
                        },
                        new
                        {
                            BooksId = 2,
                            OrdersId = 2
                        },
                        new
                        {
                            BooksId = 3,
                            OrdersId = 3
                        },
                        new
                        {
                            BooksId = 3,
                            OrdersId = 8
                        },
                        new
                        {
                            BooksId = 3,
                            OrdersId = 13
                        },
                        new
                        {
                            BooksId = 4,
                            OrdersId = 3
                        },
                        new
                        {
                            BooksId = 5,
                            OrdersId = 4
                        },
                        new
                        {
                            BooksId = 5,
                            OrdersId = 30
                        },
                        new
                        {
                            BooksId = 6,
                            OrdersId = 5
                        },
                        new
                        {
                            BooksId = 7,
                            OrdersId = 6
                        },
                        new
                        {
                            BooksId = 7,
                            OrdersId = 29
                        },
                        new
                        {
                            BooksId = 8,
                            OrdersId = 7
                        },
                        new
                        {
                            BooksId = 9,
                            OrdersId = 28
                        },
                        new
                        {
                            BooksId = 10,
                            OrdersId = 27
                        },
                        new
                        {
                            BooksId = 12,
                            OrdersId = 9
                        },
                        new
                        {
                            BooksId = 11,
                            OrdersId = 10
                        },
                        new
                        {
                            BooksId = 12,
                            OrdersId = 11
                        },
                        new
                        {
                            BooksId = 13,
                            OrdersId = 26
                        },
                        new
                        {
                            BooksId = 14,
                            OrdersId = 25
                        },
                        new
                        {
                            BooksId = 15,
                            OrdersId = 12
                        },
                        new
                        {
                            BooksId = 16,
                            OrdersId = 24
                        },
                        new
                        {
                            BooksId = 17,
                            OrdersId = 23
                        },
                        new
                        {
                            BooksId = 18,
                            OrdersId = 14
                        },
                        new
                        {
                            BooksId = 19,
                            OrdersId = 15
                        },
                        new
                        {
                            BooksId = 19,
                            OrdersId = 12
                        },
                        new
                        {
                            BooksId = 19,
                            OrdersId = 22
                        },
                        new
                        {
                            BooksId = 20,
                            OrdersId = 21
                        },
                        new
                        {
                            BooksId = 20,
                            OrdersId = 20
                        },
                        new
                        {
                            BooksId = 21,
                            OrdersId = 9
                        },
                        new
                        {
                            BooksId = 22,
                            OrdersId = 10
                        },
                        new
                        {
                            BooksId = 23,
                            OrdersId = 11
                        },
                        new
                        {
                            BooksId = 23,
                            OrdersId = 3
                        },
                        new
                        {
                            BooksId = 24,
                            OrdersId = 2
                        },
                        new
                        {
                            BooksId = 25,
                            OrdersId = 1
                        },
                        new
                        {
                            BooksId = 26,
                            OrdersId = 5
                        },
                        new
                        {
                            BooksId = 27,
                            OrdersId = 6
                        },
                        new
                        {
                            BooksId = 28,
                            OrdersId = 7
                        },
                        new
                        {
                            BooksId = 29,
                            OrdersId = 13
                        },
                        new
                        {
                            BooksId = 30,
                            OrdersId = 15
                        },
                        new
                        {
                            BooksId = 31,
                            OrdersId = 7
                        },
                        new
                        {
                            BooksId = 32,
                            OrdersId = 16
                        },
                        new
                        {
                            BooksId = 33,
                            OrdersId = 16
                        },
                        new
                        {
                            BooksId = 33,
                            OrdersId = 17
                        },
                        new
                        {
                            BooksId = 34,
                            OrdersId = 18
                        },
                        new
                        {
                            BooksId = 35,
                            OrdersId = 3
                        },
                        new
                        {
                            BooksId = 35,
                            OrdersId = 8
                        },
                        new
                        {
                            BooksId = 35,
                            OrdersId = 19
                        });
                });

            modelBuilder.Entity("BookUser", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("BooksId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("BookUser");

                    b.HasData(
                        new
                        {
                            BooksId = 1,
                            UsersId = 1
                        },
                        new
                        {
                            BooksId = 2,
                            UsersId = 2
                        },
                        new
                        {
                            BooksId = 3,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 3,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 3,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 4,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 5,
                            UsersId = 4
                        },
                        new
                        {
                            BooksId = 5,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 6,
                            UsersId = 5
                        },
                        new
                        {
                            BooksId = 7,
                            UsersId = 6
                        },
                        new
                        {
                            BooksId = 7,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 8,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 9,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 10,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 12,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 11,
                            UsersId = 10
                        },
                        new
                        {
                            BooksId = 12,
                            UsersId = 11
                        },
                        new
                        {
                            BooksId = 13,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 14,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 15,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 16,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 17,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 18,
                            UsersId = 14
                        },
                        new
                        {
                            BooksId = 19,
                            UsersId = 15
                        },
                        new
                        {
                            BooksId = 19,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 19,
                            UsersId = 1
                        },
                        new
                        {
                            BooksId = 20,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 20,
                            UsersId = 2
                        },
                        new
                        {
                            BooksId = 21,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 22,
                            UsersId = 10
                        },
                        new
                        {
                            BooksId = 23,
                            UsersId = 11
                        },
                        new
                        {
                            BooksId = 23,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 24,
                            UsersId = 2
                        },
                        new
                        {
                            BooksId = 25,
                            UsersId = 1
                        },
                        new
                        {
                            BooksId = 26,
                            UsersId = 5
                        },
                        new
                        {
                            BooksId = 27,
                            UsersId = 6
                        },
                        new
                        {
                            BooksId = 28,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 29,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 30,
                            UsersId = 15
                        },
                        new
                        {
                            BooksId = 31,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 32,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 33,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 34,
                            UsersId = 14
                        },
                        new
                        {
                            BooksId = 35,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 35,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 35,
                            UsersId = 5
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "J. K. Rowling"
                        },
                        new
                        {
                            Id = 2,
                            Name = "George R. R. Martin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Stephen King"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Agatha Christie"
                        },
                        new
                        {
                            Id = 5,
                            Name = "J.R.R. Tolkien"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Jane Austen"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Mark Twain"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Charles Dickens"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Harper Lee"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Leo Tolstoy"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Agnes Christie"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Ernest Hemingway"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Virginia Woolf"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Arthur Conan Doyle"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Antoine de Saint-Exupéry"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OverallRating")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("PrimaryGenreId")
                        .HasColumnType("integer");

                    b.Property<int>("PublisherId")
                        .HasColumnType("integer");

                    b.Property<int>("StockInStorage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryGenreId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "To Kill a Mockingbird",
                            OverallRating = 52,
                            Price = 12.44m,
                            PrimaryGenreId = 18,
                            PublisherId = 1,
                            StockInStorage = 44
                        },
                        new
                        {
                            Id = 2,
                            Name = "1984",
                            OverallRating = 88,
                            Price = 19.8m,
                            PrimaryGenreId = 15,
                            PublisherId = 1,
                            StockInStorage = 3
                        },
                        new
                        {
                            Id = 3,
                            Name = "James Bond",
                            OverallRating = 75,
                            Price = 9.01m,
                            PrimaryGenreId = 16,
                            PublisherId = 1,
                            StockInStorage = 35
                        },
                        new
                        {
                            Id = 4,
                            Name = "The Great Gatsby",
                            OverallRating = 82,
                            Price = 9.2m,
                            PrimaryGenreId = 15,
                            PublisherId = 1,
                            StockInStorage = 26
                        },
                        new
                        {
                            Id = 5,
                            Name = "One Hundred Years of Solitude",
                            OverallRating = 99,
                            Price = 23.04m,
                            PrimaryGenreId = 19,
                            PublisherId = 1,
                            StockInStorage = 44
                        },
                        new
                        {
                            Id = 6,
                            Name = "The Catcher in the Rye",
                            OverallRating = 61,
                            Price = 9.5m,
                            PrimaryGenreId = 18,
                            PublisherId = 1,
                            StockInStorage = 35
                        },
                        new
                        {
                            Id = 7,
                            Name = "Brave New World",
                            OverallRating = 41,
                            Price = 19.28m,
                            PrimaryGenreId = 2,
                            PublisherId = 1,
                            StockInStorage = 36
                        },
                        new
                        {
                            Id = 8,
                            Name = "The Hobbit",
                            OverallRating = 98,
                            Price = 7.69m,
                            PrimaryGenreId = 1,
                            PublisherId = 1,
                            StockInStorage = 3
                        },
                        new
                        {
                            Id = 9,
                            Name = "Love and Basketball",
                            OverallRating = 95,
                            Price = 8.3m,
                            PrimaryGenreId = 17,
                            PublisherId = 1,
                            StockInStorage = 3
                        },
                        new
                        {
                            Id = 10,
                            Name = "Pride and Prejudice",
                            OverallRating = 71,
                            Price = 9.11m,
                            PrimaryGenreId = 7,
                            PublisherId = 1,
                            StockInStorage = 47
                        },
                        new
                        {
                            Id = 11,
                            Name = "The Lord of the Rings: The Fellowship of the Ring",
                            OverallRating = 46,
                            Price = 10.73m,
                            PrimaryGenreId = 5,
                            PublisherId = 1,
                            StockInStorage = 6
                        },
                        new
                        {
                            Id = 12,
                            Name = "The Chronicles of Narnia: The Lion, the Witch and the Wardrobe",
                            OverallRating = 87,
                            Price = 14.07m,
                            PrimaryGenreId = 18,
                            PublisherId = 1,
                            StockInStorage = 37
                        },
                        new
                        {
                            Id = 13,
                            Name = "Harry Potter and the Philosopher's Stone",
                            OverallRating = 39,
                            Price = 7.12m,
                            PrimaryGenreId = 14,
                            PublisherId = 1,
                            StockInStorage = 28
                        },
                        new
                        {
                            Id = 14,
                            Name = "The Hunger Games",
                            OverallRating = 46,
                            Price = 16.49m,
                            PrimaryGenreId = 13,
                            PublisherId = 1,
                            StockInStorage = 4
                        },
                        new
                        {
                            Id = 15,
                            Name = "The Da Vinci Code",
                            OverallRating = 92,
                            Price = 18.57m,
                            PrimaryGenreId = 13,
                            PublisherId = 1,
                            StockInStorage = 47
                        },
                        new
                        {
                            Id = 16,
                            Name = "A Game of Thrones",
                            OverallRating = 43,
                            Price = 13.6m,
                            PrimaryGenreId = 19,
                            PublisherId = 1,
                            StockInStorage = 35
                        },
                        new
                        {
                            Id = 17,
                            Name = "The Shining",
                            OverallRating = 49,
                            Price = 21.74m,
                            PrimaryGenreId = 16,
                            PublisherId = 1,
                            StockInStorage = 1
                        },
                        new
                        {
                            Id = 18,
                            Name = "The Hitchhiker's Guide to the Galaxy",
                            OverallRating = 51,
                            Price = 6.55m,
                            PrimaryGenreId = 13,
                            PublisherId = 1,
                            StockInStorage = 26
                        },
                        new
                        {
                            Id = 19,
                            Name = "The Alchemist",
                            OverallRating = 95,
                            Price = 24.9m,
                            PrimaryGenreId = 13,
                            PublisherId = 1,
                            StockInStorage = 19
                        },
                        new
                        {
                            Id = 20,
                            Name = "War and Peace",
                            OverallRating = 89,
                            Price = 14.53m,
                            PrimaryGenreId = 1,
                            PublisherId = 1,
                            StockInStorage = 20
                        },
                        new
                        {
                            Id = 21,
                            Name = "Crime and Punishment",
                            OverallRating = 55,
                            Price = 7.47m,
                            PrimaryGenreId = 10,
                            PublisherId = 1,
                            StockInStorage = 35
                        },
                        new
                        {
                            Id = 22,
                            Name = "The Catch-22",
                            OverallRating = 55,
                            Price = 8.18m,
                            PrimaryGenreId = 13,
                            PublisherId = 1,
                            StockInStorage = 40
                        },
                        new
                        {
                            Id = 23,
                            Name = "The Grapes of Wrath",
                            OverallRating = 43,
                            Price = 21.65m,
                            PrimaryGenreId = 4,
                            PublisherId = 1,
                            StockInStorage = 11
                        },
                        new
                        {
                            Id = 24,
                            Name = "Fahrenheit 451",
                            OverallRating = 90,
                            Price = 22.95m,
                            PrimaryGenreId = 3,
                            PublisherId = 1,
                            StockInStorage = 15
                        },
                        new
                        {
                            Id = 25,
                            Name = "Lord of the Flies",
                            OverallRating = 72,
                            Price = 20.47m,
                            PrimaryGenreId = 3,
                            PublisherId = 1,
                            StockInStorage = 42
                        },
                        new
                        {
                            Id = 26,
                            Name = "Moby-Dick",
                            OverallRating = 83,
                            Price = 9.35m,
                            PrimaryGenreId = 13,
                            PublisherId = 1,
                            StockInStorage = 14
                        },
                        new
                        {
                            Id = 27,
                            Name = "Frankenstein",
                            OverallRating = 37,
                            Price = 7.35m,
                            PrimaryGenreId = 5,
                            PublisherId = 1,
                            StockInStorage = 20
                        },
                        new
                        {
                            Id = 28,
                            Name = "Alice's Adventures in Wonderland",
                            OverallRating = 56,
                            Price = 20.25m,
                            PrimaryGenreId = 3,
                            PublisherId = 1,
                            StockInStorage = 35
                        },
                        new
                        {
                            Id = 29,
                            Name = "Dracula",
                            OverallRating = 58,
                            Price = 9.8m,
                            PrimaryGenreId = 6,
                            PublisherId = 1,
                            StockInStorage = 4
                        },
                        new
                        {
                            Id = 30,
                            Name = "The Odyssey",
                            OverallRating = 81,
                            Price = 18.9m,
                            PrimaryGenreId = 15,
                            PublisherId = 1,
                            StockInStorage = 44
                        },
                        new
                        {
                            Id = 31,
                            Name = "Romeo and Juliet",
                            OverallRating = 65,
                            Price = 10.96m,
                            PrimaryGenreId = 4,
                            PublisherId = 1,
                            StockInStorage = 38
                        },
                        new
                        {
                            Id = 32,
                            Name = "Hamlet",
                            OverallRating = 43,
                            Price = 11.87m,
                            PrimaryGenreId = 18,
                            PublisherId = 1,
                            StockInStorage = 25
                        },
                        new
                        {
                            Id = 33,
                            Name = "Macbeth",
                            OverallRating = 87,
                            Price = 16.32m,
                            PrimaryGenreId = 1,
                            PublisherId = 1,
                            StockInStorage = 12
                        },
                        new
                        {
                            Id = 34,
                            Name = "Othello",
                            OverallRating = 40,
                            Price = 14.43m,
                            PrimaryGenreId = 8,
                            PublisherId = 1,
                            StockInStorage = 47
                        },
                        new
                        {
                            Id = 35,
                            Name = "The Divine Comedy",
                            OverallRating = 37,
                            Price = 18.63m,
                            PrimaryGenreId = 9,
                            PublisherId = 1,
                            StockInStorage = 21
                        },
                        new
                        {
                            Id = 36,
                            Name = "Don Quixote",
                            OverallRating = 79,
                            Price = 11.51m,
                            PrimaryGenreId = 10,
                            PublisherId = 1,
                            StockInStorage = 43
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dystopian"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Historical Fiction"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Non-fiction"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Children's"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Young Adult"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Humor"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Historical Romance"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Western"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Science Fantasy"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Self-help"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Cookbook"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8123),
                            TotalPrice = 25.29m,
                            UserId = 9
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8240),
                            TotalPrice = 40m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8244),
                            TotalPrice = 6.36m,
                            UserId = 7
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8246),
                            TotalPrice = 15.02m,
                            UserId = 6
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8256),
                            TotalPrice = 20.89m,
                            UserId = 14
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8259),
                            TotalPrice = 10.52m,
                            UserId = 8
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8261),
                            TotalPrice = 34.51m,
                            UserId = 13
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8263),
                            TotalPrice = 38.04m,
                            UserId = 5
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8265),
                            TotalPrice = 43.77m,
                            UserId = 11
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8267),
                            TotalPrice = 45.61m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8268),
                            TotalPrice = 23.09m,
                            UserId = 11
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8270),
                            TotalPrice = 21.27m,
                            UserId = 10
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8272),
                            TotalPrice = 39.84m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8274),
                            TotalPrice = 32.71m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8276),
                            TotalPrice = 27.03m,
                            UserId = 12
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8300),
                            TotalPrice = 13.17m,
                            UserId = 13
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8302),
                            TotalPrice = 6.94m,
                            UserId = 10
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8304),
                            TotalPrice = 11.12m,
                            UserId = 9
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8306),
                            TotalPrice = 45.39m,
                            UserId = 14
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8308),
                            TotalPrice = 29.64m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 21,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8310),
                            TotalPrice = 42.34m,
                            UserId = 6
                        },
                        new
                        {
                            Id = 22,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8312),
                            TotalPrice = 53.04m,
                            UserId = 10
                        },
                        new
                        {
                            Id = 23,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8314),
                            TotalPrice = 34.77m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 24,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8316),
                            TotalPrice = 45.18m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 25,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8317),
                            TotalPrice = 21.67m,
                            UserId = 8
                        },
                        new
                        {
                            Id = 26,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8319),
                            TotalPrice = 6.54m,
                            UserId = 13
                        },
                        new
                        {
                            Id = 27,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8321),
                            TotalPrice = 23.22m,
                            UserId = 9
                        },
                        new
                        {
                            Id = 28,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8323),
                            TotalPrice = 6.16m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 29,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8325),
                            TotalPrice = 28.87m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 30,
                            Date = new DateTime(2023, 12, 26, 16, 46, 9, 304, DateTimeKind.Local).AddTicks(8339),
                            TotalPrice = 15.17m,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bloomsbury"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Secker & Warburg"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Reynal & Hitchcock"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Penguin Books"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Random House"
                        },
                        new
                        {
                            Id = 6,
                            Name = "HarperCollins"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Simon & Schuster"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Macmillan Publishers"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Hachette Book Group"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Scholastic Corporation"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Oxford University Press"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Cambridge University Press"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Wiley"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Elsevier"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Springer"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 19,
                            Comment = "Great book but it gave me an existential crisis bigger than I had before",
                            UserId = 1,
                            Value = 27
                        },
                        new
                        {
                            Id = 2,
                            BookId = 30,
                            Comment = "Couldn't put it down, finished it in one sitting!",
                            UserId = 9,
                            Value = 12
                        },
                        new
                        {
                            Id = 3,
                            BookId = 31,
                            Comment = "The plot twists in this book are mind-blowing",
                            UserId = 3,
                            Value = 77
                        },
                        new
                        {
                            Id = 4,
                            BookId = 21,
                            Comment = "A classic that everyone should read",
                            UserId = 12,
                            Value = 27
                        },
                        new
                        {
                            Id = 5,
                            BookId = 12,
                            Comment = "The characters are so well-developed, felt like they were real people",
                            UserId = 9,
                            Value = 85
                        },
                        new
                        {
                            Id = 6,
                            BookId = 1,
                            Comment = "This book made me laugh and cry, a roller coaster of emotions",
                            UserId = 8,
                            Value = 95
                        },
                        new
                        {
                            Id = 7,
                            BookId = 12,
                            Comment = "The writing style is beautiful, every sentence is a work of art",
                            UserId = 12,
                            Value = 71
                        },
                        new
                        {
                            Id = 8,
                            BookId = 13,
                            Comment = "I couldn't guess the ending, kept me guessing until the last page",
                            UserId = 13,
                            Value = 69
                        },
                        new
                        {
                            Id = 9,
                            BookId = 4,
                            Comment = "I wish there was a sequel, I'm not ready to say goodbye to these characters",
                            UserId = 12,
                            Value = 16
                        },
                        new
                        {
                            Id = 10,
                            BookId = 18,
                            Comment = "The themes explored in this book are thought-provoking",
                            UserId = 5,
                            Value = 35
                        },
                        new
                        {
                            Id = 11,
                            BookId = 7,
                            Comment = "The pacing is perfect, kept me engaged from start to finish",
                            UserId = 9,
                            Value = 94
                        },
                        new
                        {
                            Id = 12,
                            BookId = 5,
                            Comment = "This book challenged my perspective on life",
                            UserId = 2,
                            Value = 79
                        },
                        new
                        {
                            Id = 13,
                            BookId = 8,
                            Comment = "The world-building is exceptional, I felt like I was there",
                            UserId = 7,
                            Value = 40
                        },
                        new
                        {
                            Id = 14,
                            BookId = 25,
                            Comment = "A must-read for book lovers",
                            UserId = 4,
                            Value = 39
                        },
                        new
                        {
                            Id = 15,
                            BookId = 29,
                            Comment = "The author's storytelling is captivating",
                            UserId = 5,
                            Value = 12
                        },
                        new
                        {
                            Id = 16,
                            BookId = 16,
                            Comment = "This book is a page-turner, couldn't stop reading",
                            UserId = 7,
                            Value = 28
                        },
                        new
                        {
                            Id = 17,
                            BookId = 28,
                            Comment = "The dialogue between characters is witty and realistic",
                            UserId = 6,
                            Value = 16
                        },
                        new
                        {
                            Id = 18,
                            BookId = 1,
                            Comment = "I've recommended this book to all my friends",
                            UserId = 4,
                            Value = 50
                        },
                        new
                        {
                            Id = 19,
                            BookId = 19,
                            Comment = "It left me with a book hangover, couldn't stop thinking about it",
                            UserId = 10,
                            Value = 29
                        },
                        new
                        {
                            Id = 20,
                            BookId = 9,
                            Comment = "",
                            UserId = 2,
                            Value = 10
                        },
                        new
                        {
                            Id = 21,
                            BookId = 29,
                            Comment = "Couldn't get into the story, found it boring from the start",
                            UserId = 4,
                            Value = 59
                        },
                        new
                        {
                            Id = 22,
                            BookId = 7,
                            Comment = "The characters felt one-dimensional and uninteresting",
                            UserId = 2,
                            Value = 34
                        },
                        new
                        {
                            Id = 23,
                            BookId = 19,
                            Comment = "The plot was predictable, I expected more twists",
                            UserId = 2,
                            Value = 49
                        },
                        new
                        {
                            Id = 24,
                            BookId = 1,
                            Comment = "I didn't connect with the protagonist, lacked depth",
                            UserId = 2,
                            Value = 16
                        },
                        new
                        {
                            Id = 25,
                            BookId = 10,
                            Comment = "The writing style was confusing and hard to follow",
                            UserId = 8,
                            Value = 20
                        },
                        new
                        {
                            Id = 26,
                            BookId = 1,
                            Comment = "This book didn't live up to the hype, very disappointing",
                            UserId = 13,
                            Value = 16
                        },
                        new
                        {
                            Id = 27,
                            BookId = 22,
                            Comment = "The ending felt rushed and unresolved",
                            UserId = 12,
                            Value = 63
                        },
                        new
                        {
                            Id = 28,
                            BookId = 23,
                            Comment = "Too much exposition, not enough action",
                            UserId = 2,
                            Value = 10
                        },
                        new
                        {
                            Id = 29,
                            BookId = 31,
                            Comment = "I found the dialogue unrealistic and forced",
                            UserId = 13,
                            Value = 43
                        },
                        new
                        {
                            Id = 30,
                            BookId = 22,
                            Comment = "The author tried too hard to be profound, came off as pretentious",
                            UserId = 2,
                            Value = 50
                        },
                        new
                        {
                            Id = 31,
                            BookId = 26,
                            Comment = "The pacing was off, some parts dragged on while others felt rushed",
                            UserId = 12,
                            Value = 21
                        },
                        new
                        {
                            Id = 32,
                            BookId = 29,
                            Comment = "The world-building was weak and inconsistent",
                            UserId = 11,
                            Value = 42
                        },
                        new
                        {
                            Id = 33,
                            BookId = 5,
                            Comment = "I couldn't sympathize with any of the characters",
                            UserId = 1,
                            Value = 51
                        },
                        new
                        {
                            Id = 34,
                            BookId = 11,
                            Comment = "The themes explored were cliché and overdone",
                            UserId = 3,
                            Value = 73
                        },
                        new
                        {
                            Id = 35,
                            BookId = 18,
                            Comment = "The book didn't live up to the reviews, a letdown",
                            UserId = 13,
                            Value = 38
                        },
                        new
                        {
                            Id = 36,
                            BookId = 28,
                            Comment = "The grammar and editing were poor, distracting from the story",
                            UserId = 12,
                            Value = 63
                        },
                        new
                        {
                            Id = 37,
                            BookId = 13,
                            Comment = "The book felt like a rip-off of [another popular book]",
                            UserId = 7,
                            Value = 12
                        },
                        new
                        {
                            Id = 38,
                            BookId = 32,
                            Comment = "The author relied too heavily on stereotypes",
                            UserId = 8,
                            Value = 63
                        },
                        new
                        {
                            Id = 39,
                            BookId = 28,
                            Comment = "I regret spending time on this book, wish I chose something else",
                            UserId = 2,
                            Value = 42
                        },
                        new
                        {
                            Id = 40,
                            BookId = 4,
                            Comment = "The climax was anticlimactic, left me unsatisfied",
                            UserId = 11,
                            Value = 50
                        },
                        new
                        {
                            Id = 41,
                            BookId = 20,
                            Comment = "Great book but it gave me an existential crisis bigger than I had before",
                            UserId = 5,
                            Value = 80
                        },
                        new
                        {
                            Id = 42,
                            BookId = 23,
                            Comment = "Couldn't put it down, finished it in one sitting!",
                            UserId = 10,
                            Value = 29
                        },
                        new
                        {
                            Id = 43,
                            BookId = 16,
                            Comment = "The plot twists in this book are mind-blowing",
                            UserId = 8,
                            Value = 82
                        },
                        new
                        {
                            Id = 44,
                            BookId = 22,
                            Comment = "A classic that everyone should read",
                            UserId = 6,
                            Value = 93
                        },
                        new
                        {
                            Id = 45,
                            BookId = 31,
                            Comment = "The characters are so well-developed, felt like they were real people",
                            UserId = 3,
                            Value = 12
                        },
                        new
                        {
                            Id = 46,
                            BookId = 16,
                            Comment = "This book made me laugh and cry, a roller coaster of emotions",
                            UserId = 9,
                            Value = 31
                        },
                        new
                        {
                            Id = 47,
                            BookId = 15,
                            Comment = "The writing style is beautiful, every sentence is a work of art",
                            UserId = 3,
                            Value = 49
                        },
                        new
                        {
                            Id = 48,
                            BookId = 20,
                            Comment = "I couldn't guess the ending, kept me guessing until the last page",
                            UserId = 14,
                            Value = 33
                        },
                        new
                        {
                            Id = 49,
                            BookId = 29,
                            Comment = "I wish there was a sequel, I'm not ready to say goodbye to these characters",
                            UserId = 8,
                            Value = 11
                        },
                        new
                        {
                            Id = 50,
                            BookId = 2,
                            Comment = "The themes explored in this book are thought-provoking",
                            UserId = 3,
                            Value = 25
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87c4f939-f940-4849-aa44-3d1b0b9dfadd",
                            Email = "Roman@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Roman Mario",
                            NormalizedEmail = "ROMAN@GMAIL.COM",
                            NormalizedUserName = "ROMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGDqLPqqhlF9J/CigwKU6mq4TRl6FiCjyFKhIZpZgIpqmZMAs/Q7Yp/UxwWUy8RXow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbabc82e-1543-46f6-b863-905878af9dc9",
                            TwoFactorEnabled = false,
                            UserName = "roman"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "78619fb3-d5e9-4769-bc0e-df2c32169c46",
                            Email = "Beth@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Beth Story",
                            NormalizedEmail = "BETH@GMAIL.COM",
                            NormalizedUserName = "BETH",
                            PasswordHash = "AQAAAAIAAYagAAAAEJgj2r0dWZ4uJlmJegr8qrdSl0vrb+xcjQwmZBrgBb1YQ+oMGWqpS4z9uf5NbY1fIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f387f34d-20e1-47a0-8aa0-f8b855dba9e3",
                            TwoFactorEnabled = false,
                            UserName = "beth"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53f4aabf-c878-441a-8657-d4b804cbb9b9",
                            Email = "Monika@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Monika Reha",
                            NormalizedEmail = "MONIKA@GMAIL.COM",
                            NormalizedUserName = "MONIKA",
                            PasswordHash = "AQAAAAIAAYagAAAAEL+rzquUbJWLRnYkbIthyd6554/wMsJk/1utcHDfByTxDljNW4ZQ5xJgqmE36lFGVg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa228dca-d79f-457a-8218-278843dcc687",
                            TwoFactorEnabled = false,
                            UserName = "monika"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3c9099a-3529-4eb0-911b-5132961b2ae5",
                            Email = "John@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "John Smith",
                            NormalizedEmail = "JOHN@GMAIL.COM",
                            NormalizedUserName = "JOHN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPXMwTg9KGZz+zQgzjKphWo1a6aTXGjKLHzz/KIsQq0Zhn3WomsUM+UfoUYJwro8tw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c601fdbf-8774-4da0-bd15-2627884cbec3",
                            TwoFactorEnabled = false,
                            UserName = "john"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c786dae-87fb-4496-be45-447210d6a5d2",
                            Email = "James@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "James Bond",
                            NormalizedEmail = "JAMES@GMAIL.COM",
                            NormalizedUserName = "JAMES",
                            PasswordHash = "AQAAAAIAAYagAAAAEJsVVq96QHOvMTiaOj+BOgRw8Q2YSbuNCU9qJSa2muu4wTo+/TA4yWZIu9f9S++0WQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d24f20fe-d4d5-4afb-9dab-0031d7e82b37",
                            TwoFactorEnabled = false,
                            UserName = "james"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c1ef4b60-c5ee-43db-ac8f-eeb89b9f5eb4",
                            Email = "Filip@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Filip Strong",
                            NormalizedEmail = "FILIP@GMAIL.COM",
                            NormalizedUserName = "FILIP",
                            PasswordHash = "AQAAAAIAAYagAAAAELhH+RTmw28/YxdVKUpmvFpqoLHAjloinZ0xaOvKcpfDFB7nl9FykZwgzhHedp2NIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b8c14e02-400c-4529-b9e1-90f4bb2f6543",
                            TwoFactorEnabled = false,
                            UserName = "filip"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4b11c75-b37c-4367-be2b-d7c835971e0f",
                            Email = "Random@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Random Guy",
                            NormalizedEmail = "RANDOM@GMAIL.COM",
                            NormalizedUserName = "RANDOM",
                            PasswordHash = "AQAAAAIAAYagAAAAEET+luGa9SroCr/xeW8qpmG3U0KdLdyWFTk1T3oSRW+EAKwxjwf/xLc/3jW2ZHND6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b6f485a2-58c5-4410-b957-58a49eccd28e",
                            TwoFactorEnabled = false,
                            UserName = "random"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7b5add9-6010-48d1-bf69-b1ba0b242050",
                            Email = "Jack@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Jack Black",
                            NormalizedEmail = "JACK@GMAIL.COM",
                            NormalizedUserName = "JACK",
                            PasswordHash = "AQAAAAIAAYagAAAAEGpgN+bTf+Mz1IWh515NBl/qD1c1RI7it3Lrz7hgi2QfElUmuN76HUPfalPGnOO6Og==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e1259f0-0732-4814-aefb-23c9d0d62ef2",
                            TwoFactorEnabled = false,
                            UserName = "jack"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c34f033-b40d-456b-8f66-3deaa7c714a0",
                            Email = "Tom@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Tom Smart",
                            NormalizedEmail = "TOM@GMAIL.COM",
                            NormalizedUserName = "TOM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC0YUXF3tC9NOj/ksWoBOpqAaCCZ6dDlk1hU+mH5Kbt1bQ74ut127hdvl6q4hDNbYw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56b55472-64a5-4c92-a804-22954e0f3df5",
                            TwoFactorEnabled = false,
                            UserName = "tom"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "82a81a86-7afb-432c-a87b-4c8e7de13dee",
                            Email = "Ali@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Ali Willy",
                            NormalizedEmail = "ALI@GMAIL.COM",
                            NormalizedUserName = "ALI",
                            PasswordHash = "AQAAAAIAAYagAAAAEFouqz+3jNlqU1F2IoMiFiP8olAn2N9grxB012DYmY3Nv/BKMcaDKn2ONzq/i36y1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "328e63f7-0ad7-45a9-b094-4e31a77cc810",
                            TwoFactorEnabled = false,
                            UserName = "ali"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf481069-0649-4855-ba21-84f1a484b46a",
                            Email = "Rubber@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Rubber Duck",
                            NormalizedEmail = "RUBBER@GMAIL.COM",
                            NormalizedUserName = "RUBBER",
                            PasswordHash = "AQAAAAIAAYagAAAAEKUxjCm38yE0Q65hISqkFn5O1IbaOls6goaSXrLHxdFpjg7Kb0QjXPft14r1R3qiJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "08258aa7-823d-4890-8557-966ba11739ce",
                            TwoFactorEnabled = false,
                            UserName = "rubber"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73a08af0-2d13-4375-9144-efee090b7873",
                            Email = "Olaf@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Olaf Snow",
                            NormalizedEmail = "OLAF@GMAIL.COM",
                            NormalizedUserName = "OLAF",
                            PasswordHash = "AQAAAAIAAYagAAAAEDiuQbPnimn4hmya5bPjzuQBGIuQL0Z+AaWV/QrjpTulWCQhvD6ya3L+SlkJMvEXJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37e537c5-e4f0-446a-bd36-2946c7698d0d",
                            TwoFactorEnabled = false,
                            UserName = "olaf"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff50ea07-9d20-4c55-896e-70822b0da9c7",
                            Email = "Good@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Good Programmer",
                            NormalizedEmail = "GOOD@GMAIL.COM",
                            NormalizedUserName = "GOOD",
                            PasswordHash = "AQAAAAIAAYagAAAAEOj0CTW+F3/8geiWlRFcZOvNdBIJqHnKoyHAzH2amHfONMxsS+F3wSxf4tfrIY4qHA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a68ab60-b362-40a8-bbfc-505cbd9ea20b",
                            TwoFactorEnabled = false,
                            UserName = "good"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "135ef7e7-4e3f-4c14-9d36-207ea5a2bee0",
                            Email = "Tim@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Tim King",
                            NormalizedEmail = "TIM@GMAIL.COM",
                            NormalizedUserName = "TIM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJtGKusqILPxMRnx1qgkboaMNN9wIZfHrn/boUVBx5ioWaFpszOiIIXh0ZrNcLW0lw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0dedf43c-22b3-401d-bfd3-c5ab23ec3773",
                            TwoFactorEnabled = false,
                            UserName = "tim"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b42e8a4e-d4c0-491a-afe4-7fa320daaeb5",
                            Email = "Adam@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Adam Queen",
                            NormalizedEmail = "ADAM@GMAIL.COM",
                            NormalizedUserName = "ADAM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHjJ30nB51b+JR+tgGWSz86WQ275IT1DYKlnWNm8T85hKi0z/9m+Aqgi7eGUdN0OxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86d18f2c-75b5-497c-a8b9-664eba2031b2",
                            TwoFactorEnabled = false,
                            UserName = "adam"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookOrder", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookUser", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Genre", "PrimaryGenre")
                        .WithMany("PrimaryGenreBooks")
                        .HasForeignKey("PrimaryGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryGenre");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Rating", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", "Book")
                        .WithMany("Ratings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Genre", b =>
                {
                    b.Navigation("PrimaryGenreBooks");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
