// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Postgres.Migrations.Migrations
{
    [DbContext(typeof(BookHubDbContext))]
    [Migration("20240106002815_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("integer");

                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBook");

                    b.HasData(
                        new
                        {
                            AuthorsId = 15,
                            BooksId = 1
                        },
                        new
                        {
                            AuthorsId = 14,
                            BooksId = 10
                        },
                        new
                        {
                            AuthorsId = 13,
                            BooksId = 11
                        },
                        new
                        {
                            AuthorsId = 13,
                            BooksId = 12
                        },
                        new
                        {
                            AuthorsId = 1,
                            BooksId = 1
                        },
                        new
                        {
                            AuthorsId = 1,
                            BooksId = 2
                        },
                        new
                        {
                            AuthorsId = 2,
                            BooksId = 3
                        },
                        new
                        {
                            AuthorsId = 2,
                            BooksId = 4
                        },
                        new
                        {
                            AuthorsId = 2,
                            BooksId = 5
                        },
                        new
                        {
                            AuthorsId = 3,
                            BooksId = 5
                        },
                        new
                        {
                            AuthorsId = 3,
                            BooksId = 6
                        },
                        new
                        {
                            AuthorsId = 3,
                            BooksId = 7
                        },
                        new
                        {
                            AuthorsId = 4,
                            BooksId = 8
                        },
                        new
                        {
                            AuthorsId = 4,
                            BooksId = 9
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 10
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 11
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 12
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 13
                        },
                        new
                        {
                            AuthorsId = 6,
                            BooksId = 14
                        },
                        new
                        {
                            AuthorsId = 6,
                            BooksId = 15
                        },
                        new
                        {
                            AuthorsId = 6,
                            BooksId = 16
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 17
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 18
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 19
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 20
                        },
                        new
                        {
                            AuthorsId = 7,
                            BooksId = 21
                        },
                        new
                        {
                            AuthorsId = 8,
                            BooksId = 22
                        },
                        new
                        {
                            AuthorsId = 8,
                            BooksId = 23
                        },
                        new
                        {
                            AuthorsId = 8,
                            BooksId = 24
                        },
                        new
                        {
                            AuthorsId = 9,
                            BooksId = 25
                        },
                        new
                        {
                            AuthorsId = 9,
                            BooksId = 26
                        },
                        new
                        {
                            AuthorsId = 9,
                            BooksId = 27
                        },
                        new
                        {
                            AuthorsId = 10,
                            BooksId = 28
                        },
                        new
                        {
                            AuthorsId = 11,
                            BooksId = 29
                        },
                        new
                        {
                            AuthorsId = 12,
                            BooksId = 30
                        },
                        new
                        {
                            AuthorsId = 13,
                            BooksId = 31
                        },
                        new
                        {
                            AuthorsId = 14,
                            BooksId = 32
                        },
                        new
                        {
                            AuthorsId = 14,
                            BooksId = 33
                        },
                        new
                        {
                            AuthorsId = 15,
                            BooksId = 34
                        },
                        new
                        {
                            AuthorsId = 15,
                            BooksId = 35
                        });
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.Property<int>("GenresId")
                        .HasColumnType("integer");

                    b.HasKey("BooksId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("BookGenre");

                    b.HasData(
                        new
                        {
                            BooksId = 1,
                            GenresId = 1
                        },
                        new
                        {
                            BooksId = 2,
                            GenresId = 2
                        },
                        new
                        {
                            BooksId = 3,
                            GenresId = 3
                        },
                        new
                        {
                            BooksId = 3,
                            GenresId = 8
                        },
                        new
                        {
                            BooksId = 3,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 4,
                            GenresId = 3
                        },
                        new
                        {
                            BooksId = 5,
                            GenresId = 4
                        },
                        new
                        {
                            BooksId = 5,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 6,
                            GenresId = 5
                        },
                        new
                        {
                            BooksId = 7,
                            GenresId = 6
                        },
                        new
                        {
                            BooksId = 7,
                            GenresId = 7
                        },
                        new
                        {
                            BooksId = 8,
                            GenresId = 7
                        },
                        new
                        {
                            BooksId = 9,
                            GenresId = 8
                        },
                        new
                        {
                            BooksId = 10,
                            GenresId = 9
                        },
                        new
                        {
                            BooksId = 11,
                            GenresId = 10
                        },
                        new
                        {
                            BooksId = 12,
                            GenresId = 11
                        },
                        new
                        {
                            BooksId = 13,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 14,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 15,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 16,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 17,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 18,
                            GenresId = 14
                        },
                        new
                        {
                            BooksId = 19,
                            GenresId = 15
                        },
                        new
                        {
                            BooksId = 19,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 19,
                            GenresId = 1
                        },
                        new
                        {
                            BooksId = 20,
                            GenresId = 16
                        },
                        new
                        {
                            BooksId = 20,
                            GenresId = 2
                        },
                        new
                        {
                            BooksId = 21,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 22,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 23,
                            GenresId = 18
                        },
                        new
                        {
                            BooksId = 23,
                            GenresId = 3
                        },
                        new
                        {
                            BooksId = 24,
                            GenresId = 19
                        },
                        new
                        {
                            BooksId = 25,
                            GenresId = 20
                        },
                        new
                        {
                            BooksId = 26,
                            GenresId = 5
                        },
                        new
                        {
                            BooksId = 27,
                            GenresId = 6
                        },
                        new
                        {
                            BooksId = 28,
                            GenresId = 7
                        },
                        new
                        {
                            BooksId = 29,
                            GenresId = 13
                        },
                        new
                        {
                            BooksId = 30,
                            GenresId = 17
                        },
                        new
                        {
                            BooksId = 31,
                            GenresId = 16
                        },
                        new
                        {
                            BooksId = 32,
                            GenresId = 12
                        },
                        new
                        {
                            BooksId = 33,
                            GenresId = 9
                        },
                        new
                        {
                            BooksId = 34,
                            GenresId = 20
                        },
                        new
                        {
                            BooksId = 35,
                            GenresId = 10
                        },
                        new
                        {
                            BooksId = 35,
                            GenresId = 8
                        },
                        new
                        {
                            BooksId = 35,
                            GenresId = 5
                        });
                });

            modelBuilder.Entity("BookUser", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("BooksId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("BookUser");

                    b.HasData(
                        new
                        {
                            BooksId = 1,
                            UsersId = 1
                        },
                        new
                        {
                            BooksId = 2,
                            UsersId = 2
                        },
                        new
                        {
                            BooksId = 3,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 3,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 3,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 4,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 5,
                            UsersId = 4
                        },
                        new
                        {
                            BooksId = 5,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 6,
                            UsersId = 5
                        },
                        new
                        {
                            BooksId = 7,
                            UsersId = 6
                        },
                        new
                        {
                            BooksId = 7,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 8,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 9,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 10,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 12,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 11,
                            UsersId = 10
                        },
                        new
                        {
                            BooksId = 12,
                            UsersId = 11
                        },
                        new
                        {
                            BooksId = 13,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 14,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 15,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 16,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 17,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 18,
                            UsersId = 14
                        },
                        new
                        {
                            BooksId = 19,
                            UsersId = 15
                        },
                        new
                        {
                            BooksId = 19,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 19,
                            UsersId = 1
                        },
                        new
                        {
                            BooksId = 20,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 20,
                            UsersId = 2
                        },
                        new
                        {
                            BooksId = 21,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 22,
                            UsersId = 10
                        },
                        new
                        {
                            BooksId = 23,
                            UsersId = 11
                        },
                        new
                        {
                            BooksId = 23,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 24,
                            UsersId = 2
                        },
                        new
                        {
                            BooksId = 25,
                            UsersId = 1
                        },
                        new
                        {
                            BooksId = 26,
                            UsersId = 5
                        },
                        new
                        {
                            BooksId = 27,
                            UsersId = 6
                        },
                        new
                        {
                            BooksId = 28,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 29,
                            UsersId = 13
                        },
                        new
                        {
                            BooksId = 30,
                            UsersId = 15
                        },
                        new
                        {
                            BooksId = 31,
                            UsersId = 7
                        },
                        new
                        {
                            BooksId = 32,
                            UsersId = 12
                        },
                        new
                        {
                            BooksId = 33,
                            UsersId = 9
                        },
                        new
                        {
                            BooksId = 34,
                            UsersId = 14
                        },
                        new
                        {
                            BooksId = 35,
                            UsersId = 3
                        },
                        new
                        {
                            BooksId = 35,
                            UsersId = 8
                        },
                        new
                        {
                            BooksId = 35,
                            UsersId = 5
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "J. K. Rowling"
                        },
                        new
                        {
                            Id = 2,
                            Name = "George R. R. Martin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Stephen King"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Agatha Christie"
                        },
                        new
                        {
                            Id = 5,
                            Name = "J.R.R. Tolkien"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Jane Austen"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Mark Twain"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Charles Dickens"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Harper Lee"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Leo Tolstoy"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Agnes Christie"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Ernest Hemingway"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Virginia Woolf"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Arthur Conan Doyle"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Antoine de Saint-Exupéry"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OverallRating")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("PrimaryGenreId")
                        .HasColumnType("integer");

                    b.Property<int>("PublisherId")
                        .HasColumnType("integer");

                    b.Property<int>("StockInStorage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryGenreId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "To Kill a Mockingbird",
                            OverallRating = 51,
                            Price = 21.54m,
                            PrimaryGenreId = 7,
                            PublisherId = 11,
                            StockInStorage = 32
                        },
                        new
                        {
                            Id = 2,
                            Name = "1984",
                            OverallRating = 56,
                            Price = 18.59m,
                            PrimaryGenreId = 12,
                            PublisherId = 1,
                            StockInStorage = 40
                        },
                        new
                        {
                            Id = 3,
                            Name = "James Bond",
                            OverallRating = 30,
                            Price = 8.31m,
                            PrimaryGenreId = 8,
                            PublisherId = 1,
                            StockInStorage = 45
                        },
                        new
                        {
                            Id = 4,
                            Name = "The Great Gatsby",
                            OverallRating = 56,
                            Price = 14.81m,
                            PrimaryGenreId = 4,
                            PublisherId = 13,
                            StockInStorage = 45
                        },
                        new
                        {
                            Id = 5,
                            Name = "One Hundred Years of Solitude",
                            OverallRating = 42,
                            Price = 18.2m,
                            PrimaryGenreId = 3,
                            PublisherId = 9,
                            StockInStorage = 9
                        },
                        new
                        {
                            Id = 6,
                            Name = "The Catcher in the Rye",
                            OverallRating = 82,
                            Price = 5.12m,
                            PrimaryGenreId = 11,
                            PublisherId = 1,
                            StockInStorage = 16
                        },
                        new
                        {
                            Id = 7,
                            Name = "Brave New World",
                            OverallRating = 51,
                            Price = 22.17m,
                            PrimaryGenreId = 11,
                            PublisherId = 8,
                            StockInStorage = 44
                        },
                        new
                        {
                            Id = 8,
                            Name = "The Hobbit",
                            OverallRating = 98,
                            Price = 17.3m,
                            PrimaryGenreId = 8,
                            PublisherId = 3,
                            StockInStorage = 4
                        },
                        new
                        {
                            Id = 9,
                            Name = "Love and Basketball",
                            OverallRating = 52,
                            Price = 11.24m,
                            PrimaryGenreId = 11,
                            PublisherId = 9,
                            StockInStorage = 9
                        },
                        new
                        {
                            Id = 10,
                            Name = "Pride and Prejudice",
                            OverallRating = 70,
                            Price = 10.59m,
                            PrimaryGenreId = 8,
                            PublisherId = 7,
                            StockInStorage = 46
                        },
                        new
                        {
                            Id = 11,
                            Name = "The Lord of the Rings: The Fellowship of the Ring",
                            OverallRating = 77,
                            Price = 9.22m,
                            PrimaryGenreId = 15,
                            PublisherId = 14,
                            StockInStorage = 21
                        },
                        new
                        {
                            Id = 12,
                            Name = "The Chronicles of Narnia: The Lion, the Witch and the Wardrobe",
                            OverallRating = 76,
                            Price = 24.21m,
                            PrimaryGenreId = 6,
                            PublisherId = 11,
                            StockInStorage = 25
                        },
                        new
                        {
                            Id = 13,
                            Name = "Harry Potter and the Philosopher's Stone",
                            OverallRating = 41,
                            Price = 15.65m,
                            PrimaryGenreId = 14,
                            PublisherId = 13,
                            StockInStorage = 8
                        },
                        new
                        {
                            Id = 14,
                            Name = "The Hunger Games",
                            OverallRating = 78,
                            Price = 18.31m,
                            PrimaryGenreId = 1,
                            PublisherId = 8,
                            StockInStorage = 6
                        },
                        new
                        {
                            Id = 15,
                            Name = "The Da Vinci Code",
                            OverallRating = 57,
                            Price = 8.06m,
                            PrimaryGenreId = 6,
                            PublisherId = 4,
                            StockInStorage = 4
                        },
                        new
                        {
                            Id = 16,
                            Name = "A Game of Thrones",
                            OverallRating = 59,
                            Price = 18.96m,
                            PrimaryGenreId = 4,
                            PublisherId = 11,
                            StockInStorage = 22
                        },
                        new
                        {
                            Id = 17,
                            Name = "The Shining",
                            OverallRating = 74,
                            Price = 9.49m,
                            PrimaryGenreId = 13,
                            PublisherId = 1,
                            StockInStorage = 6
                        },
                        new
                        {
                            Id = 18,
                            Name = "The Hitchhiker's Guide to the Galaxy",
                            OverallRating = 54,
                            Price = 6.83m,
                            PrimaryGenreId = 13,
                            PublisherId = 13,
                            StockInStorage = 6
                        },
                        new
                        {
                            Id = 19,
                            Name = "The Alchemist",
                            OverallRating = 70,
                            Price = 7.93m,
                            PrimaryGenreId = 16,
                            PublisherId = 7,
                            StockInStorage = 33
                        },
                        new
                        {
                            Id = 20,
                            Name = "War and Peace",
                            OverallRating = 98,
                            Price = 7.15m,
                            PrimaryGenreId = 14,
                            PublisherId = 7,
                            StockInStorage = 35
                        },
                        new
                        {
                            Id = 21,
                            Name = "Crime and Punishment",
                            OverallRating = 75,
                            Price = 8.67m,
                            PrimaryGenreId = 8,
                            PublisherId = 3,
                            StockInStorage = 7
                        },
                        new
                        {
                            Id = 22,
                            Name = "The Catch-22",
                            OverallRating = 89,
                            Price = 5.34m,
                            PrimaryGenreId = 16,
                            PublisherId = 5,
                            StockInStorage = 23
                        },
                        new
                        {
                            Id = 23,
                            Name = "The Grapes of Wrath",
                            OverallRating = 67,
                            Price = 17.01m,
                            PrimaryGenreId = 16,
                            PublisherId = 8,
                            StockInStorage = 45
                        },
                        new
                        {
                            Id = 24,
                            Name = "Fahrenheit 451",
                            OverallRating = 66,
                            Price = 9.76m,
                            PrimaryGenreId = 18,
                            PublisherId = 2,
                            StockInStorage = 10
                        },
                        new
                        {
                            Id = 25,
                            Name = "Lord of the Flies",
                            OverallRating = 46,
                            Price = 15.03m,
                            PrimaryGenreId = 16,
                            PublisherId = 4,
                            StockInStorage = 35
                        },
                        new
                        {
                            Id = 26,
                            Name = "Moby-Dick",
                            OverallRating = 45,
                            Price = 18.46m,
                            PrimaryGenreId = 14,
                            PublisherId = 9,
                            StockInStorage = 39
                        },
                        new
                        {
                            Id = 27,
                            Name = "Frankenstein",
                            OverallRating = 35,
                            Price = 12.91m,
                            PrimaryGenreId = 7,
                            PublisherId = 5,
                            StockInStorage = 10
                        },
                        new
                        {
                            Id = 28,
                            Name = "Alice's Adventures in Wonderland",
                            OverallRating = 35,
                            Price = 7.69m,
                            PrimaryGenreId = 3,
                            PublisherId = 11,
                            StockInStorage = 19
                        },
                        new
                        {
                            Id = 29,
                            Name = "Dracula",
                            OverallRating = 63,
                            Price = 19.42m,
                            PrimaryGenreId = 18,
                            PublisherId = 6,
                            StockInStorage = 1
                        },
                        new
                        {
                            Id = 30,
                            Name = "The Odyssey",
                            OverallRating = 82,
                            Price = 19.28m,
                            PrimaryGenreId = 17,
                            PublisherId = 9,
                            StockInStorage = 11
                        },
                        new
                        {
                            Id = 31,
                            Name = "Romeo and Juliet",
                            OverallRating = 64,
                            Price = 14.54m,
                            PrimaryGenreId = 6,
                            PublisherId = 9,
                            StockInStorage = 9
                        },
                        new
                        {
                            Id = 32,
                            Name = "Hamlet",
                            OverallRating = 82,
                            Price = 16.59m,
                            PrimaryGenreId = 2,
                            PublisherId = 13,
                            StockInStorage = 16
                        },
                        new
                        {
                            Id = 33,
                            Name = "Macbeth",
                            OverallRating = 98,
                            Price = 11.32m,
                            PrimaryGenreId = 14,
                            PublisherId = 1,
                            StockInStorage = 43
                        },
                        new
                        {
                            Id = 34,
                            Name = "Othello",
                            OverallRating = 59,
                            Price = 14.04m,
                            PrimaryGenreId = 17,
                            PublisherId = 7,
                            StockInStorage = 23
                        },
                        new
                        {
                            Id = 35,
                            Name = "The Divine Comedy",
                            OverallRating = 32,
                            Price = 13.95m,
                            PrimaryGenreId = 3,
                            PublisherId = 4,
                            StockInStorage = 23
                        },
                        new
                        {
                            Id = 36,
                            Name = "Don Quixote",
                            OverallRating = 35,
                            Price = 7.3m,
                            PrimaryGenreId = 15,
                            PublisherId = 7,
                            StockInStorage = 5
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BookOrder", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.HasKey("BookId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("BookOrders");

                    b.HasData(
                        new
                        {
                            BookId = 3,
                            OrderId = 1,
                            Count = 2
                        },
                        new
                        {
                            BookId = 18,
                            OrderId = 2,
                            Count = 4
                        },
                        new
                        {
                            BookId = 18,
                            OrderId = 3,
                            Count = 9
                        },
                        new
                        {
                            BookId = 20,
                            OrderId = 4,
                            Count = 9
                        },
                        new
                        {
                            BookId = 11,
                            OrderId = 5,
                            Count = 5
                        },
                        new
                        {
                            BookId = 7,
                            OrderId = 6,
                            Count = 1
                        },
                        new
                        {
                            BookId = 34,
                            OrderId = 7,
                            Count = 5
                        },
                        new
                        {
                            BookId = 6,
                            OrderId = 8,
                            Count = 5
                        },
                        new
                        {
                            BookId = 6,
                            OrderId = 9,
                            Count = 1
                        },
                        new
                        {
                            BookId = 5,
                            OrderId = 10,
                            Count = 2
                        },
                        new
                        {
                            BookId = 32,
                            OrderId = 11,
                            Count = 7
                        },
                        new
                        {
                            BookId = 13,
                            OrderId = 12,
                            Count = 6
                        },
                        new
                        {
                            BookId = 21,
                            OrderId = 13,
                            Count = 9
                        },
                        new
                        {
                            BookId = 26,
                            OrderId = 14,
                            Count = 3
                        },
                        new
                        {
                            BookId = 6,
                            OrderId = 15,
                            Count = 7
                        },
                        new
                        {
                            BookId = 2,
                            OrderId = 16,
                            Count = 5
                        },
                        new
                        {
                            BookId = 25,
                            OrderId = 17,
                            Count = 2
                        },
                        new
                        {
                            BookId = 5,
                            OrderId = 18,
                            Count = 4
                        },
                        new
                        {
                            BookId = 5,
                            OrderId = 19,
                            Count = 9
                        },
                        new
                        {
                            BookId = 30,
                            OrderId = 20,
                            Count = 8
                        },
                        new
                        {
                            BookId = 19,
                            OrderId = 21,
                            Count = 5
                        },
                        new
                        {
                            BookId = 5,
                            OrderId = 22,
                            Count = 3
                        },
                        new
                        {
                            BookId = 10,
                            OrderId = 23,
                            Count = 2
                        },
                        new
                        {
                            BookId = 25,
                            OrderId = 24,
                            Count = 8
                        },
                        new
                        {
                            BookId = 2,
                            OrderId = 25,
                            Count = 6
                        },
                        new
                        {
                            BookId = 3,
                            OrderId = 26,
                            Count = 8
                        },
                        new
                        {
                            BookId = 28,
                            OrderId = 27,
                            Count = 7
                        },
                        new
                        {
                            BookId = 5,
                            OrderId = 28,
                            Count = 3
                        },
                        new
                        {
                            BookId = 11,
                            OrderId = 29,
                            Count = 3
                        },
                        new
                        {
                            BookId = 29,
                            OrderId = 30,
                            Count = 9
                        },
                        new
                        {
                            BookId = 8,
                            OrderId = 31,
                            Count = 8
                        },
                        new
                        {
                            BookId = 8,
                            OrderId = 32,
                            Count = 9
                        },
                        new
                        {
                            BookId = 22,
                            OrderId = 33,
                            Count = 4
                        },
                        new
                        {
                            BookId = 32,
                            OrderId = 34,
                            Count = 9
                        },
                        new
                        {
                            BookId = 9,
                            OrderId = 35,
                            Count = 5
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dystopian"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Historical Fiction"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Non-fiction"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Children's"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Young Adult"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Humor"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Historical Romance"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Western"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Science Fantasy"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Self-help"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Cookbook"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8648),
                            PaymentStatus = 1,
                            TotalPrice = 24.84m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8783),
                            PaymentStatus = 3,
                            TotalPrice = 42.77m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8788),
                            PaymentStatus = 3,
                            TotalPrice = 53.64m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8791),
                            PaymentStatus = 4,
                            TotalPrice = 51.77m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8805),
                            PaymentStatus = 1,
                            TotalPrice = 39.03m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8809),
                            PaymentStatus = 0,
                            TotalPrice = 33.91m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8811),
                            PaymentStatus = 4,
                            TotalPrice = 37.08m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8813),
                            PaymentStatus = 1,
                            TotalPrice = 17.17m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8815),
                            PaymentStatus = 2,
                            TotalPrice = 29.27m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8818),
                            PaymentStatus = 1,
                            TotalPrice = 37.47m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8820),
                            PaymentStatus = 0,
                            TotalPrice = 6.98m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8822),
                            PaymentStatus = 2,
                            TotalPrice = 14.26m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8825),
                            PaymentStatus = 2,
                            TotalPrice = 52.4m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8827),
                            PaymentStatus = 0,
                            TotalPrice = 41.88m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8829),
                            PaymentStatus = 3,
                            TotalPrice = 11.79m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8853),
                            PaymentStatus = 1,
                            TotalPrice = 10.58m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8855),
                            PaymentStatus = 0,
                            TotalPrice = 51.46m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8858),
                            PaymentStatus = 3,
                            TotalPrice = 48.72m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8860),
                            PaymentStatus = 0,
                            TotalPrice = 13.14m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8863),
                            PaymentStatus = 1,
                            TotalPrice = 19.3m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 21,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8865),
                            PaymentStatus = 0,
                            TotalPrice = 17.69m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 22,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8867),
                            PaymentStatus = 0,
                            TotalPrice = 6.56m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 23,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8869),
                            PaymentStatus = 3,
                            TotalPrice = 32.72m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 24,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8914),
                            PaymentStatus = 2,
                            TotalPrice = 36.49m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 25,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8918),
                            PaymentStatus = 2,
                            TotalPrice = 15.62m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 26,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8920),
                            PaymentStatus = 3,
                            TotalPrice = 39.04m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 27,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8922),
                            PaymentStatus = 1,
                            TotalPrice = 19.99m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 28,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8924),
                            PaymentStatus = 4,
                            TotalPrice = 30.27m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 29,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8926),
                            PaymentStatus = 2,
                            TotalPrice = 6.59m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 30,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8932),
                            PaymentStatus = 4,
                            TotalPrice = 28.37m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 31,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8975),
                            PaymentStatus = 1,
                            TotalPrice = 8.04m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 32,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8978),
                            PaymentStatus = 2,
                            TotalPrice = 40.11m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 33,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8980),
                            PaymentStatus = 4,
                            TotalPrice = 12.59m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 34,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8983),
                            PaymentStatus = 2,
                            TotalPrice = 17.71m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 35,
                            Date = new DateTime(2024, 1, 6, 1, 28, 14, 962, DateTimeKind.Local).AddTicks(8985),
                            PaymentStatus = 3,
                            TotalPrice = 44.07m,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bloomsbury"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Secker & Warburg"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Reynal & Hitchcock"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Penguin Books"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Random House"
                        },
                        new
                        {
                            Id = 6,
                            Name = "HarperCollins"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Simon & Schuster"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Macmillan Publishers"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Hachette Book Group"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Scholastic Corporation"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Oxford University Press"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Cambridge University Press"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Wiley"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Elsevier"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Springer"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 18,
                            Comment = "Great book but it gave me an existential crisis bigger than I had before",
                            UserId = 12,
                            Value = 52
                        },
                        new
                        {
                            Id = 2,
                            BookId = 24,
                            Comment = "Couldn't put it down, finished it in one sitting!",
                            UserId = 3,
                            Value = 31
                        },
                        new
                        {
                            Id = 3,
                            BookId = 22,
                            Comment = "The plot twists in this book are mind-blowing",
                            UserId = 1,
                            Value = 10
                        },
                        new
                        {
                            Id = 4,
                            BookId = 5,
                            Comment = "A classic that everyone should read",
                            UserId = 2,
                            Value = 71
                        },
                        new
                        {
                            Id = 5,
                            BookId = 28,
                            Comment = "The characters are so well-developed, felt like they were real people",
                            UserId = 7,
                            Value = 58
                        },
                        new
                        {
                            Id = 6,
                            BookId = 25,
                            Comment = "This book made me laugh and cry, a roller coaster of emotions",
                            UserId = 5,
                            Value = 75
                        },
                        new
                        {
                            Id = 7,
                            BookId = 9,
                            Comment = "The writing style is beautiful, every sentence is a work of art",
                            UserId = 9,
                            Value = 38
                        },
                        new
                        {
                            Id = 8,
                            BookId = 26,
                            Comment = "I couldn't guess the ending, kept me guessing until the last page",
                            UserId = 1,
                            Value = 12
                        },
                        new
                        {
                            Id = 9,
                            BookId = 12,
                            Comment = "I wish there was a sequel, I'm not ready to say goodbye to these characters",
                            UserId = 8,
                            Value = 68
                        },
                        new
                        {
                            Id = 10,
                            BookId = 22,
                            Comment = "The themes explored in this book are thought-provoking",
                            UserId = 7,
                            Value = 69
                        },
                        new
                        {
                            Id = 11,
                            BookId = 9,
                            Comment = "The pacing is perfect, kept me engaged from start to finish",
                            UserId = 8,
                            Value = 83
                        },
                        new
                        {
                            Id = 12,
                            BookId = 7,
                            Comment = "This book challenged my perspective on life",
                            UserId = 6,
                            Value = 47
                        },
                        new
                        {
                            Id = 13,
                            BookId = 2,
                            Comment = "The world-building is exceptional, I felt like I was there",
                            UserId = 11,
                            Value = 32
                        },
                        new
                        {
                            Id = 14,
                            BookId = 30,
                            Comment = "A must-read for book lovers",
                            UserId = 4,
                            Value = 35
                        },
                        new
                        {
                            Id = 15,
                            BookId = 27,
                            Comment = "The author's storytelling is captivating",
                            UserId = 11,
                            Value = 23
                        },
                        new
                        {
                            Id = 16,
                            BookId = 10,
                            Comment = "This book is a page-turner, couldn't stop reading",
                            UserId = 11,
                            Value = 63
                        },
                        new
                        {
                            Id = 17,
                            BookId = 18,
                            Comment = "The dialogue between characters is witty and realistic",
                            UserId = 2,
                            Value = 23
                        },
                        new
                        {
                            Id = 18,
                            BookId = 21,
                            Comment = "I've recommended this book to all my friends",
                            UserId = 5,
                            Value = 48
                        },
                        new
                        {
                            Id = 19,
                            BookId = 23,
                            Comment = "It left me with a book hangover, couldn't stop thinking about it",
                            UserId = 10,
                            Value = 83
                        },
                        new
                        {
                            Id = 20,
                            BookId = 29,
                            Comment = "",
                            UserId = 7,
                            Value = 15
                        },
                        new
                        {
                            Id = 21,
                            BookId = 3,
                            Comment = "Couldn't get into the story, found it boring from the start",
                            UserId = 4,
                            Value = 68
                        },
                        new
                        {
                            Id = 22,
                            BookId = 12,
                            Comment = "The characters felt one-dimensional and uninteresting",
                            UserId = 6,
                            Value = 96
                        },
                        new
                        {
                            Id = 23,
                            BookId = 30,
                            Comment = "The plot was predictable, I expected more twists",
                            UserId = 13,
                            Value = 89
                        },
                        new
                        {
                            Id = 24,
                            BookId = 17,
                            Comment = "I didn't connect with the protagonist, lacked depth",
                            UserId = 9,
                            Value = 29
                        },
                        new
                        {
                            Id = 25,
                            BookId = 6,
                            Comment = "The writing style was confusing and hard to follow",
                            UserId = 11,
                            Value = 42
                        },
                        new
                        {
                            Id = 26,
                            BookId = 10,
                            Comment = "This book didn't live up to the hype, very disappointing",
                            UserId = 6,
                            Value = 25
                        },
                        new
                        {
                            Id = 27,
                            BookId = 34,
                            Comment = "The ending felt rushed and unresolved",
                            UserId = 3,
                            Value = 69
                        },
                        new
                        {
                            Id = 28,
                            BookId = 11,
                            Comment = "Too much exposition, not enough action",
                            UserId = 10,
                            Value = 96
                        },
                        new
                        {
                            Id = 29,
                            BookId = 13,
                            Comment = "I found the dialogue unrealistic and forced",
                            UserId = 7,
                            Value = 86
                        },
                        new
                        {
                            Id = 30,
                            BookId = 14,
                            Comment = "The author tried too hard to be profound, came off as pretentious",
                            UserId = 14,
                            Value = 84
                        },
                        new
                        {
                            Id = 31,
                            BookId = 27,
                            Comment = "The pacing was off, some parts dragged on while others felt rushed",
                            UserId = 1,
                            Value = 94
                        },
                        new
                        {
                            Id = 32,
                            BookId = 21,
                            Comment = "The world-building was weak and inconsistent",
                            UserId = 6,
                            Value = 71
                        },
                        new
                        {
                            Id = 33,
                            BookId = 1,
                            Comment = "I couldn't sympathize with any of the characters",
                            UserId = 9,
                            Value = 58
                        },
                        new
                        {
                            Id = 34,
                            BookId = 1,
                            Comment = "The themes explored were cliché and overdone",
                            UserId = 14,
                            Value = 14
                        },
                        new
                        {
                            Id = 35,
                            BookId = 26,
                            Comment = "The book didn't live up to the reviews, a letdown",
                            UserId = 3,
                            Value = 56
                        },
                        new
                        {
                            Id = 36,
                            BookId = 34,
                            Comment = "The grammar and editing were poor, distracting from the story",
                            UserId = 3,
                            Value = 66
                        },
                        new
                        {
                            Id = 37,
                            BookId = 31,
                            Comment = "The book felt like a rip-off of [another popular book]",
                            UserId = 6,
                            Value = 31
                        },
                        new
                        {
                            Id = 38,
                            BookId = 3,
                            Comment = "The author relied too heavily on stereotypes",
                            UserId = 2,
                            Value = 62
                        },
                        new
                        {
                            Id = 39,
                            BookId = 3,
                            Comment = "I regret spending time on this book, wish I chose something else",
                            UserId = 10,
                            Value = 33
                        },
                        new
                        {
                            Id = 40,
                            BookId = 31,
                            Comment = "The climax was anticlimactic, left me unsatisfied",
                            UserId = 12,
                            Value = 61
                        },
                        new
                        {
                            Id = 41,
                            BookId = 34,
                            Comment = "Great book but it gave me an existential crisis bigger than I had before",
                            UserId = 5,
                            Value = 74
                        },
                        new
                        {
                            Id = 42,
                            BookId = 33,
                            Comment = "Couldn't put it down, finished it in one sitting!",
                            UserId = 2,
                            Value = 20
                        },
                        new
                        {
                            Id = 43,
                            BookId = 24,
                            Comment = "The plot twists in this book are mind-blowing",
                            UserId = 12,
                            Value = 47
                        },
                        new
                        {
                            Id = 44,
                            BookId = 28,
                            Comment = "A classic that everyone should read",
                            UserId = 6,
                            Value = 27
                        },
                        new
                        {
                            Id = 45,
                            BookId = 16,
                            Comment = "The characters are so well-developed, felt like they were real people",
                            UserId = 6,
                            Value = 56
                        },
                        new
                        {
                            Id = 46,
                            BookId = 3,
                            Comment = "This book made me laugh and cry, a roller coaster of emotions",
                            UserId = 11,
                            Value = 39
                        },
                        new
                        {
                            Id = 47,
                            BookId = 23,
                            Comment = "The writing style is beautiful, every sentence is a work of art",
                            UserId = 8,
                            Value = 65
                        },
                        new
                        {
                            Id = 48,
                            BookId = 15,
                            Comment = "I couldn't guess the ending, kept me guessing until the last page",
                            UserId = 6,
                            Value = 49
                        },
                        new
                        {
                            Id = 49,
                            BookId = 23,
                            Comment = "I wish there was a sequel, I'm not ready to say goodbye to these characters",
                            UserId = 1,
                            Value = 26
                        },
                        new
                        {
                            Id = 50,
                            BookId = 28,
                            Comment = "The themes explored in this book are thought-provoking",
                            UserId = 7,
                            Value = 70
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b3ab738b-1ba0-4e19-81c5-3a3f85dbc6ca",
                            Email = "Roman@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Roman Mario",
                            NormalizedEmail = "ROMAN@GMAIL.COM",
                            NormalizedUserName = "ROMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEN5iGBwDFL6sK6CmEWOCmUV8/Zv+O6BeJO90ml4sYfTHGWFFL3Eknon/6HvUSOjpSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9029ef24-307c-4086-aa5c-f10eae2dad10",
                            TwoFactorEnabled = false,
                            UserName = "roman"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c1277305-03bf-4a05-9911-f70639337c1c",
                            Email = "Beth@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Beth Story",
                            NormalizedEmail = "BETH@GMAIL.COM",
                            NormalizedUserName = "BETH",
                            PasswordHash = "AQAAAAIAAYagAAAAEGkDFlpY7Hku6W0mO3AYga3CZZYIkbEoEFAoqH8ZdxuJUKnUo2S/ApIOFUA4IMK/Tg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5f3c4fe-4639-40fd-9abf-9beeaf89b2f1",
                            TwoFactorEnabled = false,
                            UserName = "beth"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92b7321a-0a47-4fe2-a4f1-0f85ecae8080",
                            Email = "Monika@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Monika Reha",
                            NormalizedEmail = "MONIKA@GMAIL.COM",
                            NormalizedUserName = "MONIKA",
                            PasswordHash = "AQAAAAIAAYagAAAAEKSIUW+za8R5GnKbOv4ENyG4crUxVPCQxQPP2t2OCYIis4LPkOLSH30nJpomXZLVaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "21f76505-c31a-4bb7-b332-68d54d80705c",
                            TwoFactorEnabled = false,
                            UserName = "monika"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06ea01b6-3e58-4984-91f4-c915c30064f3",
                            Email = "John@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "John Smith",
                            NormalizedEmail = "JOHN@GMAIL.COM",
                            NormalizedUserName = "JOHN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKqwq8AbjUzMQxuZDjSz2gcGcE1BMb1L1Y5ZckbFH0mYRTGhIjkkkOYespy5R9BU2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8869d7e5-a5a3-45db-b550-4febccba6e6f",
                            TwoFactorEnabled = false,
                            UserName = "john"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e698194-32ff-438a-afe0-9f45b57110fa",
                            Email = "James@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "James Bond",
                            NormalizedEmail = "JAMES@GMAIL.COM",
                            NormalizedUserName = "JAMES",
                            PasswordHash = "AQAAAAIAAYagAAAAEHoFqzPy31Sc6PdptCGJfudYvFKpY7CqwEEs8yDEt1yMJHoJh7qJWPzaucSYZvD27Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45d5014e-4cec-48a1-bf0c-70ab6283df78",
                            TwoFactorEnabled = false,
                            UserName = "james"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5bd603f-8648-43bd-8f6f-c5964f7b41b8",
                            Email = "Filip@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Filip Strong",
                            NormalizedEmail = "FILIP@GMAIL.COM",
                            NormalizedUserName = "FILIP",
                            PasswordHash = "AQAAAAIAAYagAAAAELoKEms2osTUlhaChPTPV4BPLjRwu76qJbnLcq8WhKhPqEHbVg89pb2j7v++dA+kyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f3d4b675-b854-4ab9-bd62-1b9a6c0071b8",
                            TwoFactorEnabled = false,
                            UserName = "filip"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0dd28b65-780b-4dd3-9a38-3c415a2738b7",
                            Email = "Random@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Random Guy",
                            NormalizedEmail = "RANDOM@GMAIL.COM",
                            NormalizedUserName = "RANDOM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKUAqHHTvnC+TIGxjKRqhXEs1sGvv/I4kDVZm/4gZhMgAPQQz80iFXje3iJ7xasu9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ac818a9-d76d-47fb-8878-218689a29e2c",
                            TwoFactorEnabled = false,
                            UserName = "random"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfdf2ef8-3fb8-4f91-9c97-28dbec1f5ef6",
                            Email = "Jack@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Jack Black",
                            NormalizedEmail = "JACK@GMAIL.COM",
                            NormalizedUserName = "JACK",
                            PasswordHash = "AQAAAAIAAYagAAAAEDRV1okO27uAK9SJjrDBASb5064agnd9ZtERGBZHsQTdxa8yms59ENty6DkdavFNiw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "329724d6-bf2e-4495-9f7d-9d75b721712e",
                            TwoFactorEnabled = false,
                            UserName = "jack"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "99035666-b790-457f-8439-a8b3fcf36790",
                            Email = "Tom@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Tom Smart",
                            NormalizedEmail = "TOM@GMAIL.COM",
                            NormalizedUserName = "TOM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJR8OQz7YjoP4yuEa67iO7pPvEWNSAhxFtomEiDq+BE2CI4LeGHguloISDflkh+90Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51ae49a1-9c91-46c2-82d0-5eb2817c77a2",
                            TwoFactorEnabled = false,
                            UserName = "tom"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6327e3fd-f88f-4523-af1d-c8bfafa7462f",
                            Email = "Ali@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Ali Willy",
                            NormalizedEmail = "ALI@GMAIL.COM",
                            NormalizedUserName = "ALI",
                            PasswordHash = "AQAAAAIAAYagAAAAEM+LtzEGe/dWm2gKhApqNEmR21MH6+w+TXxIY3ix4zE+wLfBDJLITkecF0VTxop6rQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0fe83b07-aa72-4950-9b32-a0ec059b8cc7",
                            TwoFactorEnabled = false,
                            UserName = "ali"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dae1af43-4388-49f1-a651-5d177f42ba56",
                            Email = "Rubber@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Rubber Duck",
                            NormalizedEmail = "RUBBER@GMAIL.COM",
                            NormalizedUserName = "RUBBER",
                            PasswordHash = "AQAAAAIAAYagAAAAEOTiFNBouY576qJZqAYLr66KAoWWNcC+WErx9W+yeXL+qGNEPMOiLnOIMTy7oqaMJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af6c60ca-8c94-4988-8144-bdd24ea40af2",
                            TwoFactorEnabled = false,
                            UserName = "rubber"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f7bf594-9644-426e-9d2f-2f255d160c87",
                            Email = "Olaf@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Olaf Snow",
                            NormalizedEmail = "OLAF@GMAIL.COM",
                            NormalizedUserName = "OLAF",
                            PasswordHash = "AQAAAAIAAYagAAAAEFKksxSmJiDt8uLJy6LQpY/9nXkxG6Yw1njsZC2udzr+IkAK2JKdCUYGn5TGiS0e9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b0a9208e-f836-43dc-b3c7-10ba8b0b0452",
                            TwoFactorEnabled = false,
                            UserName = "olaf"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69612f1b-bba4-4b23-874b-885e0a885107",
                            Email = "Good@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Good Programmer",
                            NormalizedEmail = "GOOD@GMAIL.COM",
                            NormalizedUserName = "GOOD",
                            PasswordHash = "AQAAAAIAAYagAAAAEEUgTd6EGbNizDX/M70NBUHgYTtN8oN2GWr1Ln9MiiczSv0atoGq656+tKSA+hlYJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d79a32ab-3c11-4da5-8130-0ccca7bd36af",
                            TwoFactorEnabled = false,
                            UserName = "good"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cda6e988-d51d-49ad-88aa-de9ed24021e3",
                            Email = "Tim@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Tim King",
                            NormalizedEmail = "TIM@GMAIL.COM",
                            NormalizedUserName = "TIM",
                            PasswordHash = "AQAAAAIAAYagAAAAELnDJvI31NSexE9ZmCRxK6cKzyfYWFpsbXPn2HAqerglthNXxgIgA+yaOzw2/L3Dog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "692c8792-44c4-4a3a-976e-ab0ebdb24d82",
                            TwoFactorEnabled = false,
                            UserName = "tim"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6916b278-9868-4426-9938-0d6cb69122ff",
                            Email = "Adam@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Adam Queen",
                            NormalizedEmail = "ADAM@GMAIL.COM",
                            NormalizedUserName = "ADAM",
                            PasswordHash = "AQAAAAIAAYagAAAAELhWEvp7FqhQQIxRA6dtc0nFnbmj4AUbozVRNiw0JoSdIaNggKZ4Ff2hH35hg6E0yw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a68aa38f-0237-4ac6-be1a-aeb94d1792f7",
                            TwoFactorEnabled = false,
                            UserName = "adam"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookUser", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Genre", "PrimaryGenre")
                        .WithMany("PrimaryGenreBooks")
                        .HasForeignKey("PrimaryGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryGenre");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BookOrder", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", "Book")
                        .WithMany("BookOrders")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Order", "Order")
                        .WithMany("BookOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Rating", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", "Book")
                        .WithMany("Ratings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.Navigation("BookOrders");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Genre", b =>
                {
                    b.Navigation("PrimaryGenreBooks");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.Navigation("BookOrders");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
